project.ext {
    support = "1.0.0"
    constraintlayout = "2.0.0-alpha2"
    arch = "2.0.0"
    retrofit = "2.0.2"
    room_version = "1.1.1"
    dagger_version = "2.21"
    groupId = "com.ccortez.desafiobrqapplicationkotlin"
    version = "0.0.1"
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.ccortez.desafiobrqapplicationkotlin"
        minSdkVersion 28
        targetSdkVersion 29
        versionCode 1
        versionName "0.1.1"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig signingConfigs.debug

            buildConfigField "String", "API_BASE_URL", API_BASE_URL
        }
    }

    dataBinding {
        enabled = true
    }

    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    testOptions.unitTests.includeAndroidResources true

}

kapt {
//    generateStubs = true
    javacOptions {
        // Increase the max count of errors from annotation processors.
        // Default is 100.
        option("-Xmaxerrs", 500)
    }
}

/* If you're using the Android Databinding library, you may want to
increase the number of errors that javac will print. When Dagger
prints an error, databinding compilation will halt and sometimes
print more than 100 errors, which is the default amount for javac.
For more information, see Issue 306. */

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xmaxerrs" << "500" // or whatever number you want
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    //implementation "androidx.appcompat:appcompat:$project.support"
    implementation 'androidx.core:core-ktx:1.3.0'
//    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
//    testImplementation 'junit:junit:4.12'
//    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
//    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    implementation "com.google.android.material:material:$project.support"
    implementation "androidx.appcompat:appcompat:$project.support"
    implementation "androidx.cardview:cardview:$project.support"
    implementation "androidx.recyclerview:recyclerview:$project.support"
    implementation "androidx.constraintlayout:constraintlayout:$project.constraintlayout"
    implementation "androidx.legacy:legacy-support-v4:$project.support"

    // Arch
    kapt "androidx.lifecycle:lifecycle-compiler:$project.arch"
    implementation "androidx.lifecycle:lifecycle-runtime:$project.arch"
    implementation "androidx.lifecycle:lifecycle-extensions:$project.arch"
    implementation "android.arch.lifecycle:extensions:1.1.1"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$project.retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$project.retrofit"

    // Dagger
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    implementation "com.google.dagger:dagger:$project.dagger_version"
    implementation "com.google.dagger:dagger-android:$project.dagger_version"
    implementation "com.google.dagger:dagger-android-support:$project.dagger_version"

    // Picasso
    implementation 'com.squareup.picasso:picasso:2.71828'

    // Room
    implementation "android.arch.persistence.room:runtime:$room_version"
    kapt "android.arch.persistence.room:compiler:$room_version"

    testImplementation 'junit:junit:4.12'
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
    testImplementation 'org.mockito:mockito-inline:2.23.0'
    testImplementation 'org.mockito:mockito-core:2.23.0'
    androidTestImplementation "org.mockito:mockito-android:2.23.0"
    androidTestImplementation 'com.linkedin.dexmaker:dexmaker-mockito:2.28.0'
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    testImplementation 'androidx.test:core-ktx:1.2.0'
    testImplementation 'androidx.test.ext:junit-ktx:1.1.1'
    testImplementation 'org.robolectric:robolectric:4.3.1'
    testImplementation 'com.jraska.livedata:testing-ktx:1.1.0'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.4'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation('com.android.support.test.espresso:espresso-contrib:2.0') {
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude module: 'recyclerview-v7'
    }

    // Roboeletric
    def fragment_version = "1.2.4"
    // ...
    debugImplementation "androidx.fragment:fragment-testing:$fragment_version"


}
